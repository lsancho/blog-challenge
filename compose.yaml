version: "3.8"

services:
  database:
    image: postgres:16-alpine
    container_name: backend-db
    hostname: backend-db
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./backend/database/01.sql:/docker-entrypoint-initdb.d/01.sql
      # - ./backend/database/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "postgres"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s
    deploy:
      restart_policy:
          condition: on-failure
          delay: 2s
          max_attempts: 5
          window: 20s

  api:
    build: ./backend/api
    image: blog-challenge-api
    container_name: backend-api
    hostname: backend-api
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/livez"]
      interval: 10s
      timeout: 3s
      retries: 20
      start_period: 10s
    develop:
      watch:
        - action: sync+restart
          path: ./backend/api/src
          target: /app/src
        - action: rebuild
          path: ./backend/api/package.json

  app:
    build: ./frontend
    image: blog-challenge-app
    container_name: frontend
    hostname: frontend
    env_file:
      - .env
    ports:
      - "5000:8081"
    depends_on:
      api:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./frontend/src
          target: /app/src
        - action: rebuild
          path: ./frontend/api/package.json

# volumes:
#   pgdata:
  